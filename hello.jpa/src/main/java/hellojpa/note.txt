

주의!!
1. 엔티티 매니저 팩토리는 하나만 생성해서 애플리케이션 전체에서 공유
2. 엔티티 매니저는 쓰레드간에 공유하면 안된다(사용하고 버려야 한다)
3. JPA의 모든 데이터 변경은 트랜잭션 안에서 실행

데이터베이스 스키마 자동 생성하기
1. DDL을 애플리케이션 실행 시점에 자동 생성
2. 테이블 중심 -> 객체중심
3. 데이터베이스 방언을 활용해서 데이터베이스에 맞는 적절한 DDL생성
4. 이렇게 생성된 DDL은 개발 장비에서만 사용
5. 생성된 DDL은 운영서버에서는 사용하지 않거나, 적절히 다듬은 후 사용

데이터베이스 스키마 자동 생성하기

create : 기존테이블 삭제 후 다시 생성 (DROP + CREATE)
create-drop : create와 같으나 종료시점에 테이블 DROP
update : 변경분만 반영(운영DB에는 사용하면 안됨)
validate : 엔티티와 테이블이 정상 매핑되었는지만 확인
none : 사용하지 않음

데이터베이스 스키마 자동 새어하기 주의!!!
1. 운영 장비에는 절대 create, create-drop, update 사용하면 안된다
2. 개발 초기 단계는 create 또는 update
3. 테스트 서버는 update 또는 validate
4. 스테이징과 운영 서버는 validate 또는 none

@Colum 
- 가장 많이 사용됨
- name : 필드와 매핑할 테이블의 컬럼 이름 
- insertable, updatetable: 읽기 전용
- nullable: null 허용여부 결정, DDL 생성시 사용
- unique: 유니크 제약 조건, DDL 생성시 사용
- columnDefinition, length, precision, scale(DDL)

@Lob
- CLOB, BLOG 매핑
- CLOB : String, char[], java.sql.CLOB
- BLOB : byte[], java.sql.BLOB

@Lob
private String lobString;

@Lob
private byte[] lobByte;

@Transient
- 이 필드는 매핑하지 않는다
- 애플리케이션에서 DB에 저장하지 않는 필드

식별자 매핑 어노테이션
@Id - primarykey 값 지정하는 어노테이션
@GeneratedValue - 시퀀스 전략
IDENTITY : 데이터베이스에 위임
SEQUENCE : 데이터베이스 시퀀스 오브젝트 사용 
- @SequenceGenerator 필요
TABLE : 키 생성용 테이블 사용, 모든 DB에서 사용
- @TableGenerator 필요
AUTO : 방언에 따라 자동 지정, 기본값

권장하는 식별자 전략
- 기본 키 제약 조건: null 아님, 유일, 변하면 안된다
- 미래까지 이 조건을 만족하는 자연키는 찾기 어렵다 
- 권장 : Long + 대체키 + 키 생성전략 사용


객체를 테이블에 맞추어 데이터 중심으로 모델링하면, 협력 관계를 만들 수 없다
- 테이블은 외래 키로 조인을 사용해서 연관된 테이블을 찾는다
- 객체는 참조를 사용해서 연관된 객체를 찾는다
- 테이블과 객체 사이에는 이런 큰 간격이 있다


객체지향 설계의 목표는 자율적인 객체들의 협력 공동체를 만드는 것이다
